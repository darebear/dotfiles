# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Avoid succesive duplicates in the bash command history.
export HISTCONTROL=ignoredups
 
# Append commands to the bash command history file (~/.bash_history)
# instead of overwriting it.
shopt -s histappend
 
# Append commands to the history every time a prompt is shown,
# instead of after closing the session.
PROMPT_COMMAND='history -a'

# Set up bash like VIM
set -o vi

# clear the screen
bind -m vi-insert '"\C-l":clear-screen'
bind -m vi-command '",l":clear-screen'

# turn off SSL certificate check for GIT
export GIT_SSL_NO_VERIFY=1

<<<<<<< HEAD:.bashrc

# aliases
alias 1133='cd /home/dario/Downloads/git/2015-spring/csci1133/'
alias ssh-1133='ssh canel011@kh1262-02.cselabs.umn.edu'
=======
# add hitech picc to PATH (/usr/hitech/picc/9.83/bin)
PATH="/usr/hitech/picc/9.83/bin:$PATH"

EDITOR=/usr/bin/vim
export OE_HOME=/home/d/oe

if [ -n "$DISPLAY" -a "$TERM" == "xterm" ]; then
  export TERM=xterm-256color
fi

export G1=root@192.168.2.1
export G2=root@192.168.2.2
# Common profile file for all machines
# The current machine configuration can be entered on the command line
# e.g.
# source build/profile beagleboard

##if [ -z "$1" ]
#then
    #export MY_OE_CONF="overo"
    #echo "Using default machine overo"
#else
    #export MY_OE_CONF="$1"
#fi
#
## OpenEmbedded directory
#export OE_HOME="/home/d/oe"
#export OE_TOP="$OE_HOME"
#
## Bitbake repositories: OpenEmbedded, project and user overlays
#export OEBRANCH="$OE_HOME/org.openembedded.dev"
#export PROJECTBRANCH="$OE_HOME/pixhawk.collection"
#export USERBRANCH="$OE_HOME/user.collection"
#
#export PATH="$OE_HOME/bitbake/bin:$PATH"
#export BBPATH="$OE_HOME/build:$USERBRANCH:$PROJECTBRANCH:$OEBRANCH"
#
#export BB_ENV_EXTRAWHITE="MACHINE DISTRO ANGSTROM_MODE OE_TOP OE_HOME MY_OE_CONF OEBRANCH PROJECTBRANCH USERBRANCH"
#
#umask 0002
#
#if [ "$PS1" ]; then
  #if [ "$BASH" ]; then
    #export PS1="\[\033[01;32m\]OE:$MY_OE_CONF\[\033[00m\] ${PS1}"
  #fi
#fi
#
#
# utility functions for working with bitbake
#

#function __get_kernel ()
#{
#    _KERNEL=$(bitbake -e 2>/dev/null | grep "^PREFERRED_PROVIDER_virtual/kernel=" | sed 's/"//g' | #cut -f 2 -d =)
#}
# 
#
#function __get_machine ()
#{
#    _MACHINE=$(bitbake -e 2>/dev/null | grep "^MACHINE_ARCH=" | sed 's/"//g' | cut -f 2 -d =)
#}
# 
#function bitbake-kernel-print-recipe-name ()
#{
#    __get_kernel
#    echo $_KERNEL
#}
# 
#function bitbake-kernel-reconfigure ()
#{
#    __get_kernel
#    bitbake -c menuconfig $_KERNEL
#}
# 
#function bitbake-kernel-rebuild ()
#{
#    __get_kernel
#    bitbake -c rebuild $_KERNEL
#}
# 
#function bitbake-machine-print-name ()
#{
#    __get_machine
#    echo $_MACHINE
#}
export PATH="/home/$USER/.genymotion:$PATH"

#Steam libgl.so.1 problem
#Source: http://askubuntu.com/questions/216367/steam-error-while-loading-shared-libraries-libgl-so-1-wrong-elf-class-elfcla
export LD_LIBRARY_PATH=/usr/lib32:$LD_LIBRARY_PATH
>>>>>>> f93712de5436ef198571a2ca31579bf6f2cfd93a:bash/bashrc
